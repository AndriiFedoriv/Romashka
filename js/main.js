document.addEventListener("DOMContentLoaded", () => {
  if (typeof insertCartModal === "function") insertCartModal();
  if (typeof initHeader === "function") initHeader();
  if (typeof initFooter === "function") initFooter();
  if (typeof highlightActiveLink === "function") highlightActiveLink();

  // –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–º–∏–∫–∞—á –º–æ–≤–∏ –∑ —ñ–∫–æ–Ω–∫–æ—é —É header-actions, —è–∫—â–æ —â–µ –Ω–µ–º–∞—î
  const headerActions = document.querySelector('.header-actions');
  if (headerActions && !headerActions.querySelector('.lang-toggle')) {
    const langBtn = document.createElement('button');
    langBtn.className = 'lang-toggle';
    langBtn.type = 'button';
    langBtn.setAttribute('aria-label', '–ó–º—ñ–Ω–∏—Ç–∏ –º–æ–≤—É');
    langBtn.innerHTML = '<span class="lang-icon">üá∫üá¶</span>';
    headerActions.appendChild(langBtn);
  }

  // –û–Ω–æ–≤–∏—Ç–∏ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –∫–æ—à–∏–∫–∞, –∫–æ–ª–∏ –µ–ª–µ–º–µ–Ω—Ç –∑'—è–≤–∏—Ç—å—Å—è
  const tryUpdateCartCount = () => {
    const el = document.getElementById("cartCount");
    if (el && typeof updateCartCount === "function") {
      updateCartCount();
    } else {
      setTimeout(tryUpdateCartCount, 100);
    }
  };
  tryUpdateCartCount();

  if (typeof initThemeSwitcher === "function") initThemeSwitcher();

  document.addEventListener("DOMContentLoaded", () => {
  const savedLang = localStorage.getItem("lang") || detectLanguage();
  setLanguage(savedLang, () => {
    updateLangIcon(savedLang);
    loadProducts();
  });
});

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –º–æ–≤–∏ –∑–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è–º–∏ –ø—Ä–∏—Å—Ç—Ä–æ—é
function detectLanguage() {
  const userLang = navigator.language || navigator.userLanguage;
  const ukLangs = ["uk", "ru", "be", "kk", "bg"]; // —Å–ø–∏—Å–æ–∫ –º–æ–≤, –¥–ª—è —è–∫–∏—Ö –≤—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —É–∫—Ä–∞—ó–Ω—Å—å–∫—É
  return ukLangs.some(lang => userLang.startsWith(lang)) ? "uk" : "en";
}

  // –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –º–æ–≤—É –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ —ñ –ø—ñ—Å–ª—è —Ü—å–æ–≥–æ –æ–Ω–æ–≤–∏—Ç–∏ —ñ–∫–æ–Ω–∫—É —Ç–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–æ–≤–∞—Ä–∏
  const savedLang = localStorage.getItem('lang') || 'uk';
  setLanguage(savedLang, () => {
    updateLangIcon(savedLang);
    loadProducts();
  });
});

// –î–µ–ª–µ–≥—É–≤–∞–Ω–Ω—è –¥–ª—è –ø–µ—Ä–µ–º–∏–∫–∞—á–∞ –º–æ–≤–∏ (–ø—Ä–∞—Ü—é—î –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ –∫–Ω–æ–ø–∫–∞ –∑'—è–≤–∏—Ç—å—Å—è –ø—ñ–∑–Ω—ñ—à–µ)
document.body.addEventListener('click', function(e) {
  if (e.target.closest('.lang-toggle')) {
    const current = localStorage.getItem('lang') || 'uk';
    const next = current === 'uk' ? 'en' : 'uk';
    setLanguage(next, () => {
      updateLangIcon(next);
      loadProducts();
    });
  }
});

// –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–∫–æ–Ω–∫–∏ –º–æ–≤–∏
function updateLangIcon(lang) {
  const langBtn = document.querySelector('.lang-toggle');
  if (langBtn) {
    langBtn.querySelector('.lang-icon').textContent = lang === 'uk' ? '—É–∫—Ä' : 'en';
  }
}

// –ü–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –º–æ–≤–∏
function setLanguage(lang, callback) {
  fetch(`lang/${lang}.json`)
    .then(res => {
      if (!res.ok) throw new Error('Language file not found');
      return res.json();
    })
    .then(dict => {
      localStorage.setItem('langDict', JSON.stringify(dict));
      document.querySelectorAll('[data-i18n]').forEach(el => {
        const key = el.getAttribute('data-i18n');
        if (dict[key]) el.innerHTML = dict[key];
      });
      document.querySelectorAll('[data-i18n-aria]').forEach(el => {
        const key = el.getAttribute('data-i18n-aria');
        if (dict[key]) el.setAttribute('aria-label', dict[key]);
      });
      document.querySelectorAll('[data-i18n-placeholder]').forEach(el => {
        const key = el.getAttribute('data-i18n-placeholder');
        if (dict[key]) el.setAttribute('placeholder', dict[key]);
      });
      localStorage.setItem('lang', lang);
      document.documentElement.setAttribute('lang', lang);
      if (typeof callback === "function") callback();
      if (typeof renderBlog === "function") renderBlog();
      if (typeof renderBlogPost === "function") renderBlogPost();
      if (typeof initProducts === "function") initProducts();
      if (typeof loadFooterTags === "function") loadFooterTags();
    })
    .catch(err => {
      console.error('Language loading error:', err.message);
    });
}

// –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ç–æ–≤–∞—Ä—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –º–æ–≤–∏
function loadProducts() {
  const lang = localStorage.getItem('lang') || 'uk';
  const productsFile = lang === 'en' ? 'products-en.json' : 'products.json';
  if (typeof initProducts === "function") {
    window.productsFile = productsFile;
    initProducts();
  }
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –Ω–µ—â–æ–¥–∞–≤–Ω—ñ—Ö —Ç–µ–≥—ñ–≤
function saveRecentTag(tag) {
  let tags = JSON.parse(localStorage.getItem('recentTags') || '[]');
  tags = tags.filter(t => t !== tag);
  tags.unshift(tag);
  if (tags.length > 5) tags = tags.slice(0, 5);
  localStorage.setItem('recentTags', JSON.stringify(tags));
}

// –°–ª—É—Ö–∞—á –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è –∫–æ—à–∏–∫–∞ –ø—Ä–∏ –∫–ª—ñ–∫—É –ø–æ–∑–∞ –º–æ–¥–∞–ª–∫–æ—é
document.addEventListener("click", function (e) {
  if (typeof justOpened !== "undefined" && justOpened) return;
  const overlay = document.getElementById("cartOverlay");
  const modal = document.getElementById("cartModal");
  if (
    overlay &&
    modal &&
    overlay.style.display === "block" &&
    !modal.contains(e.target)
  ) {
    if (typeof closeCart === "function") closeCart();
  }
});

// –ü–µ—Ä–µ–º–∏–∫–∞—á —Ç–µ–º–∏ (–º–æ–∂–Ω–∞ –≤–∏–Ω–µ—Å—Ç–∏ –≤ –æ–∫—Ä–µ–º–∏–π —Ñ–∞–π–ª)
function initThemeSwitcher() {
  const themeBtn = document.getElementById('themeToggleBtn');
  const themeIcon = themeBtn?.querySelector('.theme-icon');

  function setTheme(theme) {
    document.documentElement.classList.toggle('dark', theme === 'dark');
    if (themeIcon) themeIcon.textContent = theme === 'dark' ? '‚òÄÔ∏è' : 'üåô';
    if (theme === 'auto') {
      localStorage.removeItem('theme');
    } else {
      localStorage.setItem('theme', theme);
    }
  }

  function getPreferredTheme() {
    const stored = localStorage.getItem('theme');
    if (stored) return stored;
    return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
  }

  const initialTheme = getPreferredTheme();
  setTheme(initialTheme);

  window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
    if (!localStorage.getItem('theme')) {
      setTheme(e.matches ? 'dark' : 'light');
    }
  });

  if (themeBtn) {
    themeBtn.onclick = () => {
      const current = document.documentElement.classList.contains('dark') ? 'dark' : 'light';
      setTheme(current === 'dark' ? 'light' : 'dark');
    };
  }
}
window.initThemeSwitcher = initThemeSwitcher;